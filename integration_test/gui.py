import os
import sys 
import cv2
import os
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *

from dbconnect import uploadToBlobStorage

#OpenCV, PyQt, dbconnect imports

class MainWindow(QWidget):
  def __init__(self):
    # Main root window. Simple feed and button toggle widgets    
    super(MainWindow, self).__init__()
    self.VBL = QVBoxLayout()
    
    self.Worker1 = Worker()
    self.Worker1.start()
    self.Worker1.ImageUpdate.connect(self.imageUpdateSlot)
    
    self.FeedLabel = QLabel()
    self.VBL.addWidget(self.FeedLabel)
    
    self.CancelBTN = QPushButton("Cancel")
    self.CancelBTN.clicked.connect(self.cancelFeed)
    self.VBL.addWidget(self.CancelBTN)
    
    self.ToggleBTN = QPushButton("Flip")
    self.ToggleBTN.clicked.connect(self.toggleCamera)
    self.VBL.addWidget(self.ToggleBTN)
    
    self.setLayout(self.VBL)
    
  # Slot for seperate QThread to handle image processing
  def imageUpdateSlot(self, Image):
    self.FeedLabel.setPixmap(QPixmap.fromImage(Image))

  def cancelFeed(self):
    self.Worker1.toggle()
    
  def toggleCamera(self):
    self.Worker1.toggleFlip()
    
    
# Seperate asynchronous thread for reducing lag times in main UI
class Worker(QThread):
  ImageUpdate = pyqtSignal(QImage)
  
  def run(self):
    Capture = cv2.VideoCapture(0) # 0 -> Default Web Cam
    # Capture = cv2.VideoCapture('steal both.mp4')
    faceCascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml") # OpenCV Classifier
    
    self.ThreadActive = True
    self.flip = False 
    self.toUpload = True # Uploads once for simple testing
    # TODO: Hook up to actual OpenCV Video Feed
    
    while self.ThreadActive:
      ret, frame = Capture.read()
      if ret: # No errors
        Image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        ImageGray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = faceCascade.detectMultiScale(ImageGray, 1.3, 5)  
        
        # TODO: Plugin MATLAB
        
        # Simple OpenCV facial recognization and toggle flip
        flagged = False
        for (x, y, w, h) in faces:
          Image = cv2.rectangle(Image, (x, y), (x + w, y + h), (0, 255,   0), 3)
          flagged = True
        if self.flip:
          Image = cv2.flip(Image, 1)
          
        # Convert to displayable format
        ConvertToQtFormat = QImage(Image.data, Image.shape[1], Image.shape[0], QImage.Format_RGB888)
        Pic = ConvertToQtFormat.scaled(640, 480, Qt.KeepAspectRatio)
        self.ImageUpdate.emit(Pic)
        if self.toUpload and flagged:
          # cv2.imwrite("TestImage.png", cv2.cvtColor(Image, cv2.COLOR_RGB2BGR))
          # TODO: Create autogenerated ID
          # uploadToBlobStorage("TestImage.png", "randomId.png")
          self.toUpload = False
        
  # TODO: Reinitialize main thread loop if applicable
  def toggle(self):
    if self.ThreadActive:
      self.quit()
    else :
      self.start()
    self.ThreadActive = not self.ThreadActive
    # self.quit()
    
  def toggleFlip(self):
    self.flip = not self.flip
    
    
if __name__ == "__main__":
  app = QApplication(sys.argv)
  style = """
    QWidget{
      background: #262D37
    }
  """
  app.setStyleSheet(style)
  root = MainWindow()
  root.show() 
  sys.exit(app.exec())
  
  